from sqlalchemy import (
    Column,
    Integer,
    String,
    Numeric,
    ForeignKey,
    UniqueConstraint
)
from sqlalchemy.orm import relationship, declarative_base

Base = declarative_base()

class Address(Base):
    __tablename__ = 'address'

    address_id = Column(Integer, primary_key=True, autoincrement=True)  # Identity is autogenerated in PostgreSQL
    street = Column(String(100), nullable=False)
    house_number = Column(String(10), nullable=False)
    postal_code = Column(String(4), nullable=False)
    city = Column(String(25), nullable=False)
    longitude = Column(Numeric(10, 8))
    latitude = Column(Numeric(10, 8))

    # Optional: Define relationships (e.g., one-to-many with Company)
    companies = relationship('Company', back_populates='address', cascade='all, delete-orphan')


class Person(Base):
    __tablename__ = 'person'

    person_id = Column(Integer, primary_key=True, autoincrement=True)  # Identity column
    name_first = Column(String(50), nullable=False)
    name_last = Column(String(50), nullable=False)
    name_title = Column(String(50), nullable=True)
    phone_number = Column(String(20), nullable=True)
    email = Column(String(100), nullable=True)

    # Optional: Define relationships (e.g., one-to-many with Company)
    companies = relationship('Company', back_populates='contact_person')

    def __repr__(self):
        return f"{self.name_first} {self.name_last} {self.name_title} {self.phone_number} {self.email} {self.companies}"

    def __str__(self):
        return f"{self.name_first} {self.name_last} {self.name_title} {self.phone_number} {self.email} S"


class Company(Base):
    __tablename__ = 'company'

    company_id = Column(Integer, primary_key=True, autoincrement=True)  # Identity column
    address_id = Column(Integer, ForeignKey('address.address_id'), nullable=True)
    company_name = Column(String(100), nullable=False)
    contactperson_id = Column(Integer, ForeignKey('person.person_id'), nullable=True)
    tax_number = Column(String(20), nullable=False, unique=True)

    # Relationships to Address and Person
    address = relationship('Address', back_populates='companies')
    contact_person = relationship('Person', back_populates='companies')

    # Example of an explicit UniqueConstraint
    __table_args__ = (
        UniqueConstraint('tax_number', name='uq_company_tax_number'),
    )